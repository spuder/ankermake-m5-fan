esphome:
  name: foobar3
  friendly_name: AnkerMake-M5
  # platform: esp32

esp32:
  board: lolin_s2_mini
  # board: lolin_d1_mini_lite ? 
  variant: esp32s2

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "m63DOv3YOthIXl/9Dwqwfr08mifBVZRXubf6lSDNWDE="
    #TODO: remove this

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  #TODO: con't commit this
  ap:
    ssid: "Esphome-Web-737C86"
    password: "9miZnLbZX9Xf"

captive_portal:
    
web_server:
  port: 80


### GPIO Configuration
#------------------------------------------------------------------------------

# https://github.com/espressif/arduino-esp32/blob/master/variants/lolin_s2_mini/pins_arduino.h#L29-L41
# GPIO0, GPIO45, GPIO46 are in default pull-down mode at boot
# SDA = 33
# SCL = 35
# SS = 12
# MOSI = 11
# MISO = 9
# SCK = 7

# Status Led
# ==========
# Built in LED on GPIO15
# Blinks Blue
# status_led:
#   pin:
#     number: 15
#     inverted: true


# This works, but it fluctates a lot more than I expect.
# sensor:
#   # TODO: change to support a 20khz PWM signal
#   # TODO: change all pins to ones compatible with breadboards / shields
#   - platform: pulse_width
#     pin: 
#       number: 16 
#       mode: INPUT_PULLDOWN #TODO: is this needed?
#     name: Fan Duty Cycle
#     # update_interval: 500ms
#     update_interval: 2s
#     unit_of_measurement: '%'
#     accuracy_decimals: 0
#     filters:
#       - throttle: 5s
#       - lambda: |-
#           auto frequency = 20000.0;
#           auto period = 1.0 / frequency;
#           return (x / period) * 100.0;
#       # Smooth out any jitter in the signal
#       # TODO: this filtering might be a hardware interfierence problem
#       # I didn't see this issue on the esp8266 without a breakboard
#       # - sliding_window_moving_average:
#       #     window_size: 3
#       #     send_every: 1
#       #     send_first_at: 1
#       # - median:
#       #     window_size: 10 # Increased window size for more stable output
#       #     send_every: 1
#       #     send_first_at: 1
#       # - exponential_moving_average:
#       #     alpha: 0.5 # Increased alpha value for better smoothing
#       #     send_every: 1
#       # - throttle: 5s # Log the value every 5 seconds


# sensor:
#   - platform: pulse_counter
#     pin:
#       number: 16
#       mode: INPUT_PULLDOWN # Use built-in pull-down resistor (only for ESP32)
#     name: Fan Duty Cycle
#     # update_interval: 500ms
#     unit_of_measurement: '%'
#     accuracy_decimals: 0
#     # filters:
#     #   - lambda: |-
#     #       const float frequency = 20000.0;
#     #       const float period = 1.0 / frequency;
#     #       const float pulse_width_seconds = x / 2.0 * 60.0 / 1000000.0;
#     #       return (pulse_width_seconds / period) * 100.0;
#     #   - throttle: 5s # Log the value every 5 seconds
#     count_mode:
#       rising_edge: DISABLE
#       falling_edge: INCREMENT
#       # Set the following filter value based on your specific hardware timer's frequency
#     # filter: 13us

# output:
#   - platform: ledc
#     pin: 18
#     frequency: 20kHz
#     id: heatsink_fan

# fan:
# #TODO: default state
#   - platform: speed
#     output: heatsink_fan
#     name: "Heatsink Fan"
#     disabled_by_default: false
#     internal: false #TODO: make internal
#     #oscillation_output: heatsink_fan #TODO: not working
#     speed_count: 100 #TODO: do we need granular speed access, or is off/medium/high enough?
#     # speed:
#     #   - value_template: "{{ (100 - (100 - value | float) * 0.01) }}"
#     #   - entity_id: sensor.fan_duty_cycle

# this works but it is choppy
# light:
#   - platform: neopixelbus
#     id: neopixel_light
#     type: GRB
#     variant: WS2812
#     pin: 33
#     num_leds: 1
#     name: "NeoPixel Light"
#     effects:
#       - addressable_rainbow:
#           name: Ranbow Effect
#           speed: 50
#           width: 100

light:
  - platform: fastled_clockless
    id: fastled_light
    pin: 33
    chipset: WS2812
    num_leds: 1
    name: "FastLED Light"
    effects:
      - addressable_rainbow:
          name: Rainbow Effect
          speed: 10
          width: 100
      - addressable_color_wipe:
      # This breathing effect works, but it is a little choppy at low values
      # https://thingpulse.com/breathing-leds-cracking-the-algorithm-behind-our-breathing-pattern/
      # https://avital.ca/notes/a-closer-look-at-apples-breathing-light
      - addressable_lambda:
          name: Breathing Effect
          update_interval: 10ms
          lambda: |-
           static float b = 0;
            b = (sin(millis() / 1000.0) + 1.0) / 2.0;
            auto color = esphome::light::ESPColor(0, 0, uint8_t(255 * b));
            for (int i = 0; i < it.size(); ++i) {
              it[i] = color;
            }
      # 42.546 should be replaced by 83.333
      - addressable_lambda:
          name: Apple Breathing
          update_interval: 10ms
          lambda: |-
            float t = millis() / 2000.0;
            float brightness_float = (exp(sin(t * PI)) - 0.368) * 42.546;
            uint8_t brightness = uint8_t(brightness_float);
            auto color = esphome::light::ESPColor(brightness, 0, 0);
            for (int i = 0; i < it.size(); ++i) {
              it[i] = color;
            }

# Button 0
# binary_sensor:
#   - platform: gpio
#     pin:
#       number: 0
#       mode: INPUT_PULLUP
#       inverted: true
#     name: "Fan Button"
#     on_press:
#       then:
#         - state_machine.transition: TOGGLE
#     on_release:
#       then:
#         - logger.log: "Fan Button Released"

## State Machine
#----------------
external_components:
  - source:
      type: git
      url: https://github.com/muxa/esphome-state-machine

state_machine:
  - name: Fan Mode
    states:
    - "NORMAL"
    - "SILENCED"
    # TODO: Boost mode? 
    initial_state: NORMAL
    # diagram: mermaid
    inputs:
      - name: TOGGLE
        transitions:
          - NORMAL -> SILENCED
          - SILENCED -> NORMAL

text_sensor:
  - platform: state_machine
    name: Fan Mode


# TODO: connect the NTC power to a GPIO to prevent heating
# https://esphome.io/components/sensor/ntc.html#self-heating
sensor:
  # ESP32: GPIO32 through GPIO39 can be used. 
  - platform: adc
    id: source_sensor #TODO: rename
    pin: 5 # IO5 = Pin 3
    update_interval: 5s

  - platform: ntc
    sensor: source_sensor
    name: "NTC Temperature Sensor"
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 50kΩ

  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    configuration: DOWNSTREAM
    resistor: 50kΩ
    reference_voltage: 3.3V
    name: "Resistance Sensor"


# Voltage sense
# Detect if octocoupler is high or low
binary_sensor:
  - platform: gpio
    pin:
      number: 12
      mode: INPUT_PULLUP # set the mode to INPUT_PULLUP or INPUT_PULLDOWN depending on your wiring
    name: "Heater"
    filters:
      - invert:
